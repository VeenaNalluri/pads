/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Wed Sep 13 2017 14:54:01 GMT+0000 (UTC).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs',
    'pads_app/modelLoader',
    'q',
    'mrMininetTopo/Templates/Templates',


], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    loader,
    Q,
    TEMPLATES) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of mrMininetTopo.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin mrMininetTopo.
     * @constructor
     */
    var mrMininetTopo = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    mrMininetTopo.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    mrMininetTopo.prototype = Object.create(PluginBase.prototype);
    mrMininetTopo.prototype.constructor = mrMininetTopo;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    mrMininetTopo.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

       // self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});



        self.projectName = self.core.getAttribute(self.rootNode, 'name');
        var modelNode = self.activeNode;
        self.modelName = self.core.getAttribute(modelNode, 'name');


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        // self.save('mrMininetTopo updated model.')
        //     .then(function () {
        //         self.result.setSuccess(true);
        //         callback(null, self.result);
        //     })
        //     .catch(function (err) {
        //         // Result success is false at invocation.
        //         callback(err, self.result);
        //     });
        
        return loader.loadModel(self.core, modelNode)
            .then(function (pads_datamodel) {
                console.log(pads_datamodel)
                self.pads_datamodel = pads_datamodel;
            })
            .then(function() {
                return self.renderTopology();
            })
            .then(function() {
                return self.generateArtifacts();
            })
            .then(function () {
                self.result.success = true;
                // self.notify('info', 'Simulation Complete.');
                callback(null, self.result);
            })
            .catch(function (err) {
                // self.notify('error', err);
                self.result.success = false;
                callback(err, self.result);
            });



    };

    mrMininetTopo.prototype.generateArtifacts = function() {

    var self = this,
        filesToAdd = {},
        deferred = new Q.defer(),

        artifact = self.blobClient.createArtifact('GeneratedFiles');

        filesToAdd['metadata.json'] = JSON.stringify({
            timeStamp: (new Date()).toISOString(),
        }, null, 2);

        filesToAdd['topology.py'] = self.topologyFileData;

        filesToAdd['command.txt'] = self.commandFileData


    artifact.addFiles(filesToAdd, function (err) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    deferred.reject(new Error(err));
                    return;
                }

                self.result.addArtifact(hashes[0]);
                deferred.resolve();
            });
        });

        return deferred.promise;

    };


    mrMininetTopo.prototype.renderTopology = function () {
        // render docker compose file with federate type + shared folder name + command

        //type = PubSubNetwork
        var self = this;




        self.nodeLink_listInfo = []
        if(self.pads_datamodel.switchswitchconn_list){
            self.pads_datamodel.switchswitchconn_list.map((m_switchlink) => {
                self.nodeLink_listInfo.push({
                    name: m_switchlink.name,
                    type: m_switchlink.type,
                    src_name: m_switchlink.src.name,
                    dst_name: m_switchlink.dst.name,
                    Bandwidth_mbps: m_switchlink.Bandwidth_mbps,
                    Delay_ms:m_switchlink.Delay_ms,
                    Loss:m_switchlink.Loss


                })
            })
        }

        if(self.pads_datamodel.hostswitchconn_list){
            self.pads_datamodel.hostswitchconn_list.map((m_hostswitchlink) => {
                self.nodeLink_listInfo.push({
                    name: m_hostswitchlink.name,
                    type: m_hostswitchlink.type,
                    src_name: m_hostswitchlink.src.name,
                    dst_name: m_hostswitchlink.dst.name,
                    Bandwidth_mbps: m_hostswitchlink.Bandwidth_mbps,
                    Delay_ms:m_hostswitchlink.Delay_ms,
                    Loss:m_hostswitchlink.Loss
                })
            })
        }


        self.AppHostList = {};

        self.hostInfo = [];
        if(self.pads_datamodel.MRhost_list){
            self.pads_datamodel.MRhost_list.map((m_host) => {
                self.hostInfo.push({
                    ip_addr:m_host.ip_addr,
                    name: m_host.name,
                    type: m_host.type,
                    app_path: []
                })
            })
        }


        //! Make Sure to Call this after we have a host list
        if(self.pads_datamodel.mapreducehostconn_list){
            self.pads_datamodel.mapreducehostconn_list.map((m_pubLink) => {
                self.AppHostList[m_pubLink.src.path] =m_pubLink.dst.name;
            })
        }

        self.reduceInfo = []
        if(self.pads_datamodel.ReduceApp_list){
            self.pads_datamodel.ReduceApp_list.map((m_reducer) => {
                self.reduceInfo.push({
                    instances:m_reducer.instances,
                    name: m_reducer.name,
                    type: m_reducer.type,
                    path:m_reducer.path,
                    scriptName: m_reducer.FileName,
                    args: m_reducer.args,
                    controllerIP: m_reducer.controllerIP
                })
            })
        }

        self.mapInfo = []
        if(self.pads_datamodel.MapApp_list){
            self.pads_datamodel.MapApp_list.map((m_mapper) => {
                self.mapInfo.push({
                    instances:m_mapper.instances,
                    name: m_mapper.name,
                    type: m_mapper.type,
                    path:m_mapper.path,
                    scriptName: m_mapper.FileName,
                    args: m_mapper.args,
                    controllerIP: m_mapper.controllerIP
                })
            })
        }

        self.controllerInfo = []
        if(self.pads_datamodel.Controller_list){
            self.pads_datamodel.Controller_list.map((m_sub) => {
                self.controllerInfo.push({
                    instances:m_sub.instances,
                    name: m_sub.name,
                    type:m_sub.type,
                    path: m_sub.path,
                    scriptName: m_sub.FileName,
                    args: m_sub.args,
                    sortingFileName: m_sub.sortingFileName,

                })
            })
        }

        self.switchInfo = [];
        if(self.pads_datamodel.MRSwitch_list){
            self.pads_datamodel.MRSwitch_list.map((m_switch) => {
                self.switchInfo.push({
                    name: m_switch.name,
                    type: m_switch.type
                })
            })
        }


        self.topologyFileData = ejs.render(
            TEMPLATES['topologyFileTemplate.ejs'],
            {
                hostInfo: self.hostInfo,
                switchInfo: self.switchInfo,
                nodeLink_listInfo: self.nodeLink_listInfo
            }
        );

        self.commandFileData = ejs.render(
            TEMPLATES['commandFileTemplate.ejs'],
            {
                AppHostList: self.AppHostList,
                reduceInfo:self.reduceInfo,
                mapInfo: self.mapInfo,
                controllerInfo: self.controllerInfo
            }
        );
        var topowrite = function() {

            var path = require('path'),
                filendir = require('filendir'),
                fileName = 'topology.py'
            var basePath = process.cwd();
            var deferred = Q.defer();
            filendir.writeFile(path.join(basePath, fileName), self.topologyFileData, function(err) {
                if (err){
                    console.error("not able to create the file")
                    deferred.reject(err);
                }
                else{
                    console.log("done writing file to", path.join(basePath,fileName) )
                    deferred.resolve();
                }
            });
            return deferred.promise;
        };

        var commandwrite = function() {

            var path = require('path'),
                filendir = require('filendir'),
                fileName = 'command.txt'
            var basePath = process.cwd();
            var deferred = Q.defer();
            filendir.writeFile(path.join(basePath, fileName), self.commandFileData, function(err) {
                if (err){
                    console.error("not able to create the file")
                    deferred.reject(err);
                }
                else{
                    console.log("done writing file to", path.join(basePath,fileName) )
                    deferred.resolve();
                }
            });
            return deferred.promise;
        };

        // return self.commandFileData;
        return self.topologyFileData;
        // return topowrite().then(commandwrite);
    };


    return mrMininetTopo;
});
