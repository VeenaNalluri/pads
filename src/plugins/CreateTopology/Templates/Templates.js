//jshint ignore: start
/* Generated file based on ejs templates */
define([], function() {
    return {
    "commandFileTemplate.ejs": "<% publisherInfo.map(function(entry) {  -%>\n<%- AppHostList[entry.path] %> python <%- entry.scriptName%> <%- entry.args %> &\n<% }) -%>\n\n<% brokerInfo.map(function(entry) { -%>\n<%- AppHostList[entry.path] %> python <%- entry.scriptName%> <%- entry.args %> &\n<% }) -%>\n\n<% subscriberInfo.map(function(entry) { -%>\n<%- AppHostList[entry.path] %> python <%- entry.scriptName%> <%- entry.args %> &\n<% }) -%>",
    "dockerFileTemplate.ejs": "---\nservices:\n  fedManager:\n    build: .\n    image: \"cpswt/c2wtcore_v002:160816\"\n    command: \"sh start.sh FedManager\"\n    extra_hosts:\n      - \"cpswtng_archiva:10.0.2.15\"\n    volumes:\n      - <%- inputPrefix %>/FedManager:/root/Projects/c2wt/input\n      - <%- outputPrefix %>/FedManager:/root/Projects/c2wt/logs\n<%\nfedInfos.map(function(fedInfo) {\n-%>\n  <%- fedInfo.type %>_<%- fedInfo.name %>:\n    build: .\n    image: \"<%- dockerInfoMap[fedInfo.type].name %>:<%- dockerInfoMap[fedInfo.type].tag %>\"\n    command: \"sh start.sh <%- fedInfo.type %>,<%- fedInfo.name %>\" \n    extra_hosts:\n      - \"cpswtng_archiva:10.0.2.15\"\n    volumes:\n      - <%- inputPrefix %>/<%- fedInfo.name %>:/root/Projects/c2wt/input\n      - <%- outputPrefix %>/<%- fedInfo.name %>:/root/Projects/c2wt/logs\n<%\n})\n-%>\nversion: \"2\"\n",
    "startScript.ejs": "#!/bin/bash\nif [ $1 = \"FedManager\" ]; then\n   echo \"Starting --> \" $1\n   #xvfb-run -a mvn exec:exec -P Fedmanager\n   #xvfb-run -a mvn exec:exec -P FedManager &> /root/Projects/c2wt/logs/log.txt\n   xvfb-run -a mvn package exec:exec -P FedManager 2>&1 | tee -a /root/Projects/c2wt/logs/log.txt\nelse\n  echo \"Starting -->\" $1\n  #mvn exec:exec -P $1 &> /root/Projects/c2wt/logs/log.txt\n  mvn package exec:exec -P $1  2>&1 | tee -a /root/Projects/c2wt/logs/log.txt\nfi\n",
    "topologyFileTemplate.ejs": "#!/usr/bin/python\n\n\"\"\"\nThis is a simple example that demonstrates multiple links\nbetween nodes.\n\"\"\"\n\nfrom mininet.cli import CLI\nfrom mininet.log import setLogLevel\nfrom mininet.net import Mininet\nfrom mininet.topo import Topo\n\ndef runMultiLink():\n    \"Create and run multiple link network\"\n    topo = simpleMultiLinkTopo( n=2 )\n    net = Mininet( topo=topo )\n    net.start()\n    CLI( net )\n    net.stop()\n\nclass simpleMultiLinkTopo( Topo ):\n    \"Simple topology with multiple links\"\n\n    def __init__( self, n, **kwargs ):\n        Topo.__init__( self, **kwargs )\n\n    <% hostInfo.map(function(host) {  -%>\n    <%- host.name %> = self.addHost('<%- host.name %>')\n    <% }) -%>\n\n    <% switchInfo.map(function(entry) { -%>\n    <%- entry.name %> = self.addSwitch('<%- entry.name %>')\n    <% }) -%>\n\n    <% nodeLink_listInfo.map(function(entry) { -%>\n    self.addLink(<%- entry.src_name %>,<%- entry.dst_name %>,bw=<%- entry.Bandwidth_Mbps%>, delay ='<%- entry.Delay_ms%>ms' , loss=<%- entry.Loss%>)\n    <% }) -%>\n\nif __name__ == '__main__':\n    setLogLevel( 'info' )\n    runMultiLink()\n"
}});