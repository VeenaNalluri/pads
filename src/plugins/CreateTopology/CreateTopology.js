/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Fri Feb 03 2017 15:27:19 GMT+0000 (UTC).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs',
    'pads_app/modelLoader',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    loader,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CreateTopology.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CreateTopology.
     * @constructor
     */
    var CreateTopology = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CreateTopology.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CreateTopology.prototype = Object.create(PluginBase.prototype);
    CreateTopology.prototype.constructor = CreateTopology;


    CreateTopology.prototype.notify = function(level, msg) {
        var self = this;
        var prefix = self.projectId + '::' + self.projectName + '::' + level + '::';
        var max_msg_len = 100;
        if (level=='error')
            self.logger.error(msg);
        else if (level=='debug')
            self.logger.debug(msg);
        else if (level=='info')
            self.logger.info(msg);
        else if (level=='warning')
            self.logger.warn(msg);
        self.createMessage(self.activeNode, msg, level);
        if (msg.length < max_msg_len)
            self.sendNotification(prefix+msg);
        else {
            var splitMsgs = utils.chunkString(msg, max_msg_len);
            splitMsgs.map(function(splitMsg) {
                self.sendNotification(prefix+splitMsg);
            });
        }
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    CreateTopology.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        if (typeof WebGMEGlobal !== 'undefined') {
            var msg = 'You must run this plugin on the server!';
            self.notify('error', msg);
            callback(new Error(msg), self.result);
        }

        // Using the logger.
        // self.logger.debug('This is a debug message.');
        // self.logger.info('This is an info message.');
        // self.logger.warn('This is a warning message.');
        // self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
        // nodeObject = self.activeNode;

        var currentConfig = self.getCurrentConfig();

        // self.deploymentFiles = currentConfig.deploymentFiles;
        // self.runLocally = currentConfig.runLocally;
        self.projectName = self.core.getAttribute(self.rootNode, 'name');

        var modelNode = self.activeNode;
        self.modelName = self.core.getAttribute(modelNode, 'name');

        var path = require('path');
        var filendir = require('filendir');
        self.root_dir = path.join(process.cwd(),
            'generated',
            self.project.projectId,
            self.branchName,
            'models');

        return loader.loadModel(self.core, modelNode)
            .then(function(federationModel) {
                self.federationModel = federationModel;
            })
            .then(function() {
                return self.renderDockerFile();
            })
            .then(function() {
                return self.renderStartScript();
            })
            .then(function() {
                return self.createInputsFolder();
            })
            .then(function() {
                return self.writeInputs();
            })
            .then(function() {
                return self.runSimulation();
            })
            .then(function() {
                return self.copyArtifacts();
            })
            .then(function() {
                self.result.success = true;
                self.notify('info', 'Simulation Complete.');
                callback(null, self.result);
            })
            .catch(function(err) {
                self.notify('error', err);
                self.result.success = false;
                callback(err, self.result);
            });





        // self.core.setAttribute(nodeObject, 'name', 'My new obj');
        // self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        // self.save('CreateTopology updated model.')
        //     .then(function () {
        //         self.result.setSuccess(true);
        //         callback(null, self.result);
        //     })
        //     .catch(function (err) {
        //         // Result success is false at invocation.
        //         callback(err, self.result);
        //     });

    };

    return CreateTopology;
});
